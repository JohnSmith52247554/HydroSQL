/**
 * @file affairs.hpp
 * @author username (username52247554@gmail.com)
 * @brief The result generated by the parser. Use to cache the parameter and execute the command. 
 * @version 0.1
 * @date 2025-06-20
 * 
 * @copyright Copyright (c) 2025
 * 
 */

#pragma once

#include <pch.hpp>
#include <engine/include/table.hpp>
#include <authority/include/authority.hpp>

namespace HydroSQL::Server::Parser
{
    using Authoriser = Authority::Authoriser;
    using AuthLevel = Authority::AuthLevel;

    class Affair
    {
    public:
        virtual ~Affair() = default;
        virtual const int execute(const std::unique_ptr<Authoriser> auth, std::string &result) const = 0;
    };

    class CreateTableA : public Affair
    {
    private:
        std::string table_name;
        std::vector<Engine::Column> col;

    public:
        CreateTableA(std::string &&tn, std::vector<Engine::Column> &&c)
            : table_name(tn), col(c)
        {}
        ~CreateTableA() override = default;

        virtual const int execute(const std::unique_ptr<Authoriser> auth, std::string &result) const override;
    };

    class InsertA : public Affair
    {
    private:
        std::string table_name;
        std::vector<std::string> keys;
        std::vector<std::vector<std::shared_ptr<Engine::LT::LT>>> values;

    public:
        InsertA(std::string &&tn, std::vector<std::string> &&k, std::vector<std::vector<std::shared_ptr<Engine::LT::LT>>> &&v)
            : table_name(tn), keys(k), values(v)
        {}
        ~InsertA() override = default;

        virtual const int execute(const std::unique_ptr<Authoriser> auth, std::string &result) const override;
    };

    class SelectA : public Affair
    {
    private:
        std::string table_name;
        std::vector<std::string> keys;
        std::shared_ptr<Engine::LT::LT> requirements;
        std::shared_ptr<Engine::SelectOrder> order;

    public:
        SelectA(std::string &&tn, std::vector<std::string> &&k, std::shared_ptr<Engine::LT::LT> &&r, std::shared_ptr<Engine::SelectOrder> &&o)
            : table_name(tn), keys(k), requirements(r), order(o)
        {}
        ~SelectA() override = default;

        virtual const int execute(const std::unique_ptr<Authoriser> auth, std::string &result) const override;
    };

    class UpdateA : public Affair
    {
    private:
        std::string table_name;
        std::vector<std::string> keys;
        std::vector<std::shared_ptr<Engine::LT::LT>> expr;
        std::shared_ptr<Engine::LT::LT> requirements;

    public:
        UpdateA(std::string &&tn, std::vector<std::string> &&k, std::vector<std::shared_ptr<Engine::LT::LT>> &&e, std::shared_ptr<Engine::LT::LT> &&r)
            : table_name(tn), keys(k), expr(e), requirements(r)
        {}
        ~UpdateA() override = default;

        virtual const int execute(const std::unique_ptr<Authoriser> auth, std::string &result) const override;
    };

    class DeleteA : public Affair
    {
    private:
        std::string table_name;
        std::shared_ptr<Engine::LT::LT> requirements;
    
    public:
        DeleteA(std::string &&tn, std::shared_ptr<Engine::LT::LT> &&r)
            : table_name(tn), requirements(r)
        {}
        ~DeleteA() override = default;

        virtual const int execute(const std::unique_ptr<Authoriser> auth, std::string &result) const override;
    };

    class DropA : public Affair
    {
    private:
        std::string table_name;

    public:
        DropA(std::string &&tn)
            : table_name(tn)
        {}
        ~DropA() = default;

        virtual const int execute(const std::unique_ptr<Authoriser> auth, std::string &result) const override;
    };

} // namespace HydroSQL::Server::Parser
